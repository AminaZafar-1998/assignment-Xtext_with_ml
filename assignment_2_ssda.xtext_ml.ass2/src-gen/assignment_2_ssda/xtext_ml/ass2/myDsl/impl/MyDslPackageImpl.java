/**
 * generated by Xtext 2.26.0
 */
package assignment_2_ssda.xtext_ml.ass2.myDsl.impl;

import assignment_2_ssda.xtext_ml.ass2.myDsl.Alopecia;
import assignment_2_ssda.xtext_ml.ass2.myDsl.Diabetes_Prediction_System;
import assignment_2_ssda.xtext_ml.ass2.myDsl.Doctor;
import assignment_2_ssda.xtext_ml.ass2.myDsl.Genital_thrush;
import assignment_2_ssda.xtext_ml.ass2.myDsl.Irritability;
import assignment_2_ssda.xtext_ml.ass2.myDsl.Itching;
import assignment_2_ssda.xtext_ml.ass2.myDsl.J48Classifier;
import assignment_2_ssda.xtext_ml.ass2.myDsl.Machine_learning_Algorithms;
import assignment_2_ssda.xtext_ml.ass2.myDsl.Medicines;
import assignment_2_ssda.xtext_ml.ass2.myDsl.MyDslFactory;
import assignment_2_ssda.xtext_ml.ass2.myDsl.MyDslPackage;
import assignment_2_ssda.xtext_ml.ass2.myDsl.NavieBayes;
import assignment_2_ssda.xtext_ml.ass2.myDsl.Obesity;
import assignment_2_ssda.xtext_ml.ass2.myDsl.Patient;
import assignment_2_ssda.xtext_ml.ass2.myDsl.Polydipsia;
import assignment_2_ssda.xtext_ml.ass2.myDsl.Polyphagia;
import assignment_2_ssda.xtext_ml.ass2.myDsl.Polyuria;
import assignment_2_ssda.xtext_ml.ass2.myDsl.Predict_diabetes;
import assignment_2_ssda.xtext_ml.ass2.myDsl.Random_forest;
import assignment_2_ssda.xtext_ml.ass2.myDsl.SVM_Classifier;
import assignment_2_ssda.xtext_ml.ass2.myDsl.Sugar_Test;
import assignment_2_ssda.xtext_ml.ass2.myDsl.Symptom;
import assignment_2_ssda.xtext_ml.ass2.myDsl.delayed_healing;
import assignment_2_ssda.xtext_ml.ass2.myDsl.muscle_stiffness;
import assignment_2_ssda.xtext_ml.ass2.myDsl.partial_paresis;
import assignment_2_ssda.xtext_ml.ass2.myDsl.sudden_weight_loss;
import assignment_2_ssda.xtext_ml.ass2.myDsl.visual_blurring;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyDslPackageImpl extends EPackageImpl implements MyDslPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass diabetes_Prediction_SystemEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass medicinesEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass symptomEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass polyuriaEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass polydipsiaEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sudden_weight_lossEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass polyphagiaEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass genital_thrushEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass visual_blurringEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass itchingEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass irritabilityEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass delayed_healingEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass partial_paresisEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass muscle_stiffnessEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass alopeciaEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass obesityEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sugar_TestEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass doctorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass patientEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass predict_diabetesEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass machine_learning_AlgorithmsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass random_forestEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass svM_ClassifierEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass j48ClassifierEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass navieBayesEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.MyDslPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private MyDslPackageImpl()
  {
    super(eNS_URI, MyDslFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link MyDslPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static MyDslPackage init()
  {
    if (isInited) return (MyDslPackage)EPackage.Registry.INSTANCE.getEPackage(MyDslPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredMyDslPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    MyDslPackageImpl theMyDslPackage = registeredMyDslPackage instanceof MyDslPackageImpl ? (MyDslPackageImpl)registeredMyDslPackage : new MyDslPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theMyDslPackage.createPackageContents();

    // Initialize created meta-data
    theMyDslPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theMyDslPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(MyDslPackage.eNS_URI, theMyDslPackage);
    return theMyDslPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDiabetes_Prediction_System()
  {
    return diabetes_Prediction_SystemEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDiabetes_Prediction_System_Name()
  {
    return (EAttribute)diabetes_Prediction_SystemEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDiabetes_Prediction_System_Medicines()
  {
    return (EReference)diabetes_Prediction_SystemEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDiabetes_Prediction_System_Symptom()
  {
    return (EReference)diabetes_Prediction_SystemEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDiabetes_Prediction_System_Doctors()
  {
    return (EReference)diabetes_Prediction_SystemEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDiabetes_Prediction_System_Patient()
  {
    return (EReference)diabetes_Prediction_SystemEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDiabetes_Prediction_System_Machine_learning_Algorithms()
  {
    return (EReference)diabetes_Prediction_SystemEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMedicines()
  {
    return medicinesEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMedicines_Medicine_name()
  {
    return (EAttribute)medicinesEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMedicines_Medicine_dossage()
  {
    return (EAttribute)medicinesEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSymptom()
  {
    return symptomEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSymptom_Name()
  {
    return (EAttribute)symptomEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPolyuria()
  {
    return polyuriaEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPolydipsia()
  {
    return polydipsiaEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getsudden_weight_loss()
  {
    return sudden_weight_lossEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPolyphagia()
  {
    return polyphagiaEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getGenital_thrush()
  {
    return genital_thrushEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getvisual_blurring()
  {
    return visual_blurringEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getItching()
  {
    return itchingEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIrritability()
  {
    return irritabilityEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getdelayed_healing()
  {
    return delayed_healingEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getpartial_paresis()
  {
    return partial_paresisEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getmuscle_stiffness()
  {
    return muscle_stiffnessEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAlopecia()
  {
    return alopeciaEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getObesity()
  {
    return obesityEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSugar_Test()
  {
    return sugar_TestEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSugar_Test_Previous_blood_sugar()
  {
    return (EAttribute)sugar_TestEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSugar_Test_Current_blood_sugar()
  {
    return (EAttribute)sugar_TestEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDoctor()
  {
    return doctorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDoctor_Name()
  {
    return (EAttribute)doctorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDoctor_Doctor_specailization()
  {
    return (EAttribute)doctorEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDoctor_Medicines()
  {
    return (EReference)doctorEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDoctor_Symptoms()
  {
    return (EReference)doctorEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPatient()
  {
    return patientEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPatient_Name()
  {
    return (EAttribute)patientEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPatient_Patient_Gender()
  {
    return (EAttribute)patientEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPatient_Patient_Age()
  {
    return (EAttribute)patientEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPatient_Patient_Height()
  {
    return (EAttribute)patientEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPatient_Patient_Weight()
  {
    return (EAttribute)patientEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPatient_Patient_blood_pressure()
  {
    return (EAttribute)patientEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPatient_Pulse_rate()
  {
    return (EAttribute)patientEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPatient_Symptoms()
  {
    return (EReference)patientEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPatient_Medicines()
  {
    return (EReference)patientEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPatient_Sugar_tests()
  {
    return (EReference)patientEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPatient_DOCTORS()
  {
    return (EReference)patientEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPredict_diabetes()
  {
    return predict_diabetesEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPredict_diabetes_Name()
  {
    return (EAttribute)predict_diabetesEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMachine_learning_Algorithms()
  {
    return machine_learning_AlgorithmsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMachine_learning_Algorithms_Predict_diabetes()
  {
    return (EReference)machine_learning_AlgorithmsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRandom_forest()
  {
    return random_forestEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRandom_forest_Create_trees()
  {
    return (EAttribute)random_forestEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSVM_Classifier()
  {
    return svM_ClassifierEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVM_Classifier_Kernel()
  {
    return (EAttribute)svM_ClassifierEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJ48Classifier()
  {
    return j48ClassifierEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJ48Classifier_Set_pruned_trees()
  {
    return (EAttribute)j48ClassifierEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNavieBayes()
  {
    return navieBayesEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getNavieBayes_Conditional_Probability_based()
  {
    return (EAttribute)navieBayesEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MyDslFactory getMyDslFactory()
  {
    return (MyDslFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    diabetes_Prediction_SystemEClass = createEClass(DIABETES_PREDICTION_SYSTEM);
    createEAttribute(diabetes_Prediction_SystemEClass, DIABETES_PREDICTION_SYSTEM__NAME);
    createEReference(diabetes_Prediction_SystemEClass, DIABETES_PREDICTION_SYSTEM__MEDICINES);
    createEReference(diabetes_Prediction_SystemEClass, DIABETES_PREDICTION_SYSTEM__SYMPTOM);
    createEReference(diabetes_Prediction_SystemEClass, DIABETES_PREDICTION_SYSTEM__DOCTORS);
    createEReference(diabetes_Prediction_SystemEClass, DIABETES_PREDICTION_SYSTEM__PATIENT);
    createEReference(diabetes_Prediction_SystemEClass, DIABETES_PREDICTION_SYSTEM__MACHINE_LEARNING_ALGORITHMS);

    medicinesEClass = createEClass(MEDICINES);
    createEAttribute(medicinesEClass, MEDICINES__MEDICINE_NAME);
    createEAttribute(medicinesEClass, MEDICINES__MEDICINE_DOSSAGE);

    symptomEClass = createEClass(SYMPTOM);
    createEAttribute(symptomEClass, SYMPTOM__NAME);

    polyuriaEClass = createEClass(POLYURIA);

    polydipsiaEClass = createEClass(POLYDIPSIA);

    sudden_weight_lossEClass = createEClass(SUDDEN_WEIGHT_LOSS);

    polyphagiaEClass = createEClass(POLYPHAGIA);

    genital_thrushEClass = createEClass(GENITAL_THRUSH);

    visual_blurringEClass = createEClass(VISUAL_BLURRING);

    itchingEClass = createEClass(ITCHING);

    irritabilityEClass = createEClass(IRRITABILITY);

    delayed_healingEClass = createEClass(DELAYED_HEALING);

    partial_paresisEClass = createEClass(PARTIAL_PARESIS);

    muscle_stiffnessEClass = createEClass(MUSCLE_STIFFNESS);

    alopeciaEClass = createEClass(ALOPECIA);

    obesityEClass = createEClass(OBESITY);

    sugar_TestEClass = createEClass(SUGAR_TEST);
    createEAttribute(sugar_TestEClass, SUGAR_TEST__PREVIOUS_BLOOD_SUGAR);
    createEAttribute(sugar_TestEClass, SUGAR_TEST__CURRENT_BLOOD_SUGAR);

    doctorEClass = createEClass(DOCTOR);
    createEAttribute(doctorEClass, DOCTOR__NAME);
    createEAttribute(doctorEClass, DOCTOR__DOCTOR_SPECAILIZATION);
    createEReference(doctorEClass, DOCTOR__MEDICINES);
    createEReference(doctorEClass, DOCTOR__SYMPTOMS);

    patientEClass = createEClass(PATIENT);
    createEAttribute(patientEClass, PATIENT__NAME);
    createEAttribute(patientEClass, PATIENT__PATIENT_GENDER);
    createEAttribute(patientEClass, PATIENT__PATIENT_AGE);
    createEAttribute(patientEClass, PATIENT__PATIENT_HEIGHT);
    createEAttribute(patientEClass, PATIENT__PATIENT_WEIGHT);
    createEAttribute(patientEClass, PATIENT__PATIENT_BLOOD_PRESSURE);
    createEAttribute(patientEClass, PATIENT__PULSE_RATE);
    createEReference(patientEClass, PATIENT__SYMPTOMS);
    createEReference(patientEClass, PATIENT__MEDICINES);
    createEReference(patientEClass, PATIENT__SUGAR_TESTS);
    createEReference(patientEClass, PATIENT__DOCTORS);

    predict_diabetesEClass = createEClass(PREDICT_DIABETES);
    createEAttribute(predict_diabetesEClass, PREDICT_DIABETES__NAME);

    machine_learning_AlgorithmsEClass = createEClass(MACHINE_LEARNING_ALGORITHMS);
    createEReference(machine_learning_AlgorithmsEClass, MACHINE_LEARNING_ALGORITHMS__PREDICT_DIABETES);

    random_forestEClass = createEClass(RANDOM_FOREST);
    createEAttribute(random_forestEClass, RANDOM_FOREST__CREATE_TREES);

    svM_ClassifierEClass = createEClass(SVM_CLASSIFIER);
    createEAttribute(svM_ClassifierEClass, SVM_CLASSIFIER__KERNEL);

    j48ClassifierEClass = createEClass(J48_CLASSIFIER);
    createEAttribute(j48ClassifierEClass, J48_CLASSIFIER__SET_PRUNED_TREES);

    navieBayesEClass = createEClass(NAVIE_BAYES);
    createEAttribute(navieBayesEClass, NAVIE_BAYES__CONDITIONAL_PROBABILITY_BASED);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    polyuriaEClass.getESuperTypes().add(this.getSymptom());
    polydipsiaEClass.getESuperTypes().add(this.getSymptom());
    sudden_weight_lossEClass.getESuperTypes().add(this.getSymptom());
    polyphagiaEClass.getESuperTypes().add(this.getSymptom());
    genital_thrushEClass.getESuperTypes().add(this.getSymptom());
    visual_blurringEClass.getESuperTypes().add(this.getSymptom());
    itchingEClass.getESuperTypes().add(this.getSymptom());
    irritabilityEClass.getESuperTypes().add(this.getSymptom());
    delayed_healingEClass.getESuperTypes().add(this.getSymptom());
    partial_paresisEClass.getESuperTypes().add(this.getSymptom());
    muscle_stiffnessEClass.getESuperTypes().add(this.getSymptom());
    alopeciaEClass.getESuperTypes().add(this.getSymptom());
    obesityEClass.getESuperTypes().add(this.getSymptom());
    random_forestEClass.getESuperTypes().add(this.getMachine_learning_Algorithms());
    svM_ClassifierEClass.getESuperTypes().add(this.getMachine_learning_Algorithms());
    j48ClassifierEClass.getESuperTypes().add(this.getMachine_learning_Algorithms());
    navieBayesEClass.getESuperTypes().add(this.getMachine_learning_Algorithms());

    // Initialize classes and features; add operations and parameters
    initEClass(diabetes_Prediction_SystemEClass, Diabetes_Prediction_System.class, "Diabetes_Prediction_System", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDiabetes_Prediction_System_Name(), ecorePackage.getEString(), "name", null, 0, 1, Diabetes_Prediction_System.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDiabetes_Prediction_System_Medicines(), this.getMedicines(), null, "medicines", null, 0, -1, Diabetes_Prediction_System.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDiabetes_Prediction_System_Symptom(), this.getSymptom(), null, "symptom", null, 0, -1, Diabetes_Prediction_System.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDiabetes_Prediction_System_Doctors(), this.getDoctor(), null, "doctors", null, 0, -1, Diabetes_Prediction_System.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDiabetes_Prediction_System_Patient(), this.getPatient(), null, "patient", null, 0, -1, Diabetes_Prediction_System.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDiabetes_Prediction_System_Machine_learning_Algorithms(), this.getMachine_learning_Algorithms(), null, "Machine_learning_Algorithms", null, 0, -1, Diabetes_Prediction_System.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(medicinesEClass, Medicines.class, "Medicines", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMedicines_Medicine_name(), ecorePackage.getEString(), "Medicine_name", null, 0, 1, Medicines.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMedicines_Medicine_dossage(), ecorePackage.getEString(), "Medicine_dossage", null, 0, 1, Medicines.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(symptomEClass, Symptom.class, "Symptom", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSymptom_Name(), ecorePackage.getEString(), "name", null, 0, 1, Symptom.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(polyuriaEClass, Polyuria.class, "Polyuria", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(polydipsiaEClass, Polydipsia.class, "Polydipsia", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(sudden_weight_lossEClass, sudden_weight_loss.class, "sudden_weight_loss", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(polyphagiaEClass, Polyphagia.class, "Polyphagia", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(genital_thrushEClass, Genital_thrush.class, "Genital_thrush", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(visual_blurringEClass, visual_blurring.class, "visual_blurring", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(itchingEClass, Itching.class, "Itching", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(irritabilityEClass, Irritability.class, "Irritability", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(delayed_healingEClass, delayed_healing.class, "delayed_healing", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(partial_paresisEClass, partial_paresis.class, "partial_paresis", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(muscle_stiffnessEClass, muscle_stiffness.class, "muscle_stiffness", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(alopeciaEClass, Alopecia.class, "Alopecia", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(obesityEClass, Obesity.class, "Obesity", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(sugar_TestEClass, Sugar_Test.class, "Sugar_Test", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSugar_Test_Previous_blood_sugar(), ecorePackage.getEString(), "Previous_blood_sugar", null, 0, 1, Sugar_Test.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSugar_Test_Current_blood_sugar(), ecorePackage.getEString(), "Current_blood_sugar", null, 0, 1, Sugar_Test.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(doctorEClass, Doctor.class, "Doctor", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDoctor_Name(), ecorePackage.getEString(), "name", null, 0, 1, Doctor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDoctor_Doctor_specailization(), ecorePackage.getEString(), "Doctor_specailization", null, 0, 1, Doctor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDoctor_Medicines(), this.getMedicines(), null, "medicines", null, 0, -1, Doctor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDoctor_Symptoms(), this.getSymptom(), null, "symptoms", null, 0, -1, Doctor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(patientEClass, Patient.class, "Patient", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPatient_Name(), ecorePackage.getEString(), "name", null, 0, 1, Patient.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPatient_Patient_Gender(), ecorePackage.getEString(), "Patient_Gender", null, 0, 1, Patient.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPatient_Patient_Age(), ecorePackage.getEInt(), "Patient_Age", null, 0, 1, Patient.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPatient_Patient_Height(), ecorePackage.getEString(), "Patient_Height", null, 0, 1, Patient.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPatient_Patient_Weight(), ecorePackage.getEString(), "Patient_Weight", null, 0, 1, Patient.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPatient_Patient_blood_pressure(), ecorePackage.getEInt(), "patient_blood_pressure", null, 0, 1, Patient.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPatient_Pulse_rate(), ecorePackage.getEInt(), "pulse_rate", null, 0, 1, Patient.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPatient_Symptoms(), this.getSymptom(), null, "symptoms", null, 0, -1, Patient.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPatient_Medicines(), this.getMedicines(), null, "medicines", null, 0, -1, Patient.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPatient_Sugar_tests(), this.getSugar_Test(), null, "sugar_tests", null, 0, -1, Patient.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPatient_DOCTORS(), this.getDoctor(), null, "DOCTORS", null, 0, -1, Patient.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(predict_diabetesEClass, Predict_diabetes.class, "Predict_diabetes", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPredict_diabetes_Name(), ecorePackage.getEInt(), "name", null, 0, 1, Predict_diabetes.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(machine_learning_AlgorithmsEClass, Machine_learning_Algorithms.class, "Machine_learning_Algorithms", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMachine_learning_Algorithms_Predict_diabetes(), this.getPredict_diabetes(), null, "Predict_diabetes", null, 0, 1, Machine_learning_Algorithms.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(random_forestEClass, Random_forest.class, "Random_forest", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRandom_forest_Create_trees(), ecorePackage.getEString(), "create_trees", null, 0, 1, Random_forest.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(svM_ClassifierEClass, SVM_Classifier.class, "SVM_Classifier", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSVM_Classifier_Kernel(), ecorePackage.getEString(), "Kernel", null, 0, 1, SVM_Classifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(j48ClassifierEClass, J48Classifier.class, "J48Classifier", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getJ48Classifier_Set_pruned_trees(), ecorePackage.getEString(), "set_pruned_trees", null, 0, 1, J48Classifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(navieBayesEClass, NavieBayes.class, "NavieBayes", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getNavieBayes_Conditional_Probability_based(), ecorePackage.getEString(), "Conditional_Probability_based", null, 0, 1, NavieBayes.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //MyDslPackageImpl
