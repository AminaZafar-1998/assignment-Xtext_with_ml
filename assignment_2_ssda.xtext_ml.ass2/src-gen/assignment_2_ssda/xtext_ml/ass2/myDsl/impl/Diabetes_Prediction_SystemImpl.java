/**
 * generated by Xtext 2.26.0
 */
package assignment_2_ssda.xtext_ml.ass2.myDsl.impl;

import assignment_2_ssda.xtext_ml.ass2.myDsl.Diabetes_Prediction_System;
import assignment_2_ssda.xtext_ml.ass2.myDsl.Doctor;
import assignment_2_ssda.xtext_ml.ass2.myDsl.Machine_learning_Algorithms;
import assignment_2_ssda.xtext_ml.ass2.myDsl.Medicines;
import assignment_2_ssda.xtext_ml.ass2.myDsl.MyDslPackage;
import assignment_2_ssda.xtext_ml.ass2.myDsl.Patient;
import assignment_2_ssda.xtext_ml.ass2.myDsl.Symptom;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Diabetes Prediction System</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link assignment_2_ssda.xtext_ml.ass2.myDsl.impl.Diabetes_Prediction_SystemImpl#getName <em>Name</em>}</li>
 *   <li>{@link assignment_2_ssda.xtext_ml.ass2.myDsl.impl.Diabetes_Prediction_SystemImpl#getMedicines <em>Medicines</em>}</li>
 *   <li>{@link assignment_2_ssda.xtext_ml.ass2.myDsl.impl.Diabetes_Prediction_SystemImpl#getSymptom <em>Symptom</em>}</li>
 *   <li>{@link assignment_2_ssda.xtext_ml.ass2.myDsl.impl.Diabetes_Prediction_SystemImpl#getDoctors <em>Doctors</em>}</li>
 *   <li>{@link assignment_2_ssda.xtext_ml.ass2.myDsl.impl.Diabetes_Prediction_SystemImpl#getPatient <em>Patient</em>}</li>
 *   <li>{@link assignment_2_ssda.xtext_ml.ass2.myDsl.impl.Diabetes_Prediction_SystemImpl#getMachine_learning_Algorithms <em>Machine learning Algorithms</em>}</li>
 * </ul>
 *
 * @generated
 */
public class Diabetes_Prediction_SystemImpl extends MinimalEObjectImpl.Container implements Diabetes_Prediction_System
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getMedicines() <em>Medicines</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMedicines()
   * @generated
   * @ordered
   */
  protected EList<Medicines> medicines;

  /**
   * The cached value of the '{@link #getSymptom() <em>Symptom</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSymptom()
   * @generated
   * @ordered
   */
  protected EList<Symptom> symptom;

  /**
   * The cached value of the '{@link #getDoctors() <em>Doctors</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDoctors()
   * @generated
   * @ordered
   */
  protected EList<Doctor> doctors;

  /**
   * The cached value of the '{@link #getPatient() <em>Patient</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPatient()
   * @generated
   * @ordered
   */
  protected EList<Patient> patient;

  /**
   * The cached value of the '{@link #getMachine_learning_Algorithms() <em>Machine learning Algorithms</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMachine_learning_Algorithms()
   * @generated
   * @ordered
   */
  protected EList<Machine_learning_Algorithms> machine_learning_Algorithms;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Diabetes_Prediction_SystemImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.DIABETES_PREDICTION_SYSTEM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.DIABETES_PREDICTION_SYSTEM__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Medicines> getMedicines()
  {
    if (medicines == null)
    {
      medicines = new EObjectContainmentEList<Medicines>(Medicines.class, this, MyDslPackage.DIABETES_PREDICTION_SYSTEM__MEDICINES);
    }
    return medicines;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Symptom> getSymptom()
  {
    if (symptom == null)
    {
      symptom = new EObjectContainmentEList<Symptom>(Symptom.class, this, MyDslPackage.DIABETES_PREDICTION_SYSTEM__SYMPTOM);
    }
    return symptom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Doctor> getDoctors()
  {
    if (doctors == null)
    {
      doctors = new EObjectContainmentEList<Doctor>(Doctor.class, this, MyDslPackage.DIABETES_PREDICTION_SYSTEM__DOCTORS);
    }
    return doctors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Patient> getPatient()
  {
    if (patient == null)
    {
      patient = new EObjectContainmentEList<Patient>(Patient.class, this, MyDslPackage.DIABETES_PREDICTION_SYSTEM__PATIENT);
    }
    return patient;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Machine_learning_Algorithms> getMachine_learning_Algorithms()
  {
    if (machine_learning_Algorithms == null)
    {
      machine_learning_Algorithms = new EObjectContainmentEList<Machine_learning_Algorithms>(Machine_learning_Algorithms.class, this, MyDslPackage.DIABETES_PREDICTION_SYSTEM__MACHINE_LEARNING_ALGORITHMS);
    }
    return machine_learning_Algorithms;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__MEDICINES:
        return ((InternalEList<?>)getMedicines()).basicRemove(otherEnd, msgs);
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__SYMPTOM:
        return ((InternalEList<?>)getSymptom()).basicRemove(otherEnd, msgs);
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__DOCTORS:
        return ((InternalEList<?>)getDoctors()).basicRemove(otherEnd, msgs);
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__PATIENT:
        return ((InternalEList<?>)getPatient()).basicRemove(otherEnd, msgs);
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__MACHINE_LEARNING_ALGORITHMS:
        return ((InternalEList<?>)getMachine_learning_Algorithms()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__NAME:
        return getName();
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__MEDICINES:
        return getMedicines();
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__SYMPTOM:
        return getSymptom();
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__DOCTORS:
        return getDoctors();
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__PATIENT:
        return getPatient();
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__MACHINE_LEARNING_ALGORITHMS:
        return getMachine_learning_Algorithms();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__NAME:
        setName((String)newValue);
        return;
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__MEDICINES:
        getMedicines().clear();
        getMedicines().addAll((Collection<? extends Medicines>)newValue);
        return;
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__SYMPTOM:
        getSymptom().clear();
        getSymptom().addAll((Collection<? extends Symptom>)newValue);
        return;
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__DOCTORS:
        getDoctors().clear();
        getDoctors().addAll((Collection<? extends Doctor>)newValue);
        return;
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__PATIENT:
        getPatient().clear();
        getPatient().addAll((Collection<? extends Patient>)newValue);
        return;
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__MACHINE_LEARNING_ALGORITHMS:
        getMachine_learning_Algorithms().clear();
        getMachine_learning_Algorithms().addAll((Collection<? extends Machine_learning_Algorithms>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__MEDICINES:
        getMedicines().clear();
        return;
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__SYMPTOM:
        getSymptom().clear();
        return;
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__DOCTORS:
        getDoctors().clear();
        return;
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__PATIENT:
        getPatient().clear();
        return;
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__MACHINE_LEARNING_ALGORITHMS:
        getMachine_learning_Algorithms().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__MEDICINES:
        return medicines != null && !medicines.isEmpty();
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__SYMPTOM:
        return symptom != null && !symptom.isEmpty();
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__DOCTORS:
        return doctors != null && !doctors.isEmpty();
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__PATIENT:
        return patient != null && !patient.isEmpty();
      case MyDslPackage.DIABETES_PREDICTION_SYSTEM__MACHINE_LEARNING_ALGORITHMS:
        return machine_learning_Algorithms != null && !machine_learning_Algorithms.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //Diabetes_Prediction_SystemImpl
