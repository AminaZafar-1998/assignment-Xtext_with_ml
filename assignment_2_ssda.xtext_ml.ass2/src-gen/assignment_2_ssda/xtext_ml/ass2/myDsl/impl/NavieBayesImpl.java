/**
 * generated by Xtext 2.26.0
 */
package assignment_2_ssda.xtext_ml.ass2.myDsl.impl;

import assignment_2_ssda.xtext_ml.ass2.myDsl.MyDslPackage;
import assignment_2_ssda.xtext_ml.ass2.myDsl.NavieBayes;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Navie Bayes</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link assignment_2_ssda.xtext_ml.ass2.myDsl.impl.NavieBayesImpl#getConditional_Probability_based <em>Conditional Probability based</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NavieBayesImpl extends Machine_learning_AlgorithmsImpl implements NavieBayes
{
  /**
   * The default value of the '{@link #getConditional_Probability_based() <em>Conditional Probability based</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditional_Probability_based()
   * @generated
   * @ordered
   */
  protected static final String CONDITIONAL_PROBABILITY_BASED_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConditional_Probability_based() <em>Conditional Probability based</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditional_Probability_based()
   * @generated
   * @ordered
   */
  protected String conditional_Probability_based = CONDITIONAL_PROBABILITY_BASED_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NavieBayesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.NAVIE_BAYES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getConditional_Probability_based()
  {
    return conditional_Probability_based;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConditional_Probability_based(String newConditional_Probability_based)
  {
    String oldConditional_Probability_based = conditional_Probability_based;
    conditional_Probability_based = newConditional_Probability_based;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.NAVIE_BAYES__CONDITIONAL_PROBABILITY_BASED, oldConditional_Probability_based, conditional_Probability_based));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.NAVIE_BAYES__CONDITIONAL_PROBABILITY_BASED:
        return getConditional_Probability_based();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.NAVIE_BAYES__CONDITIONAL_PROBABILITY_BASED:
        setConditional_Probability_based((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.NAVIE_BAYES__CONDITIONAL_PROBABILITY_BASED:
        setConditional_Probability_based(CONDITIONAL_PROBABILITY_BASED_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.NAVIE_BAYES__CONDITIONAL_PROBABILITY_BASED:
        return CONDITIONAL_PROBABILITY_BASED_EDEFAULT == null ? conditional_Probability_based != null : !CONDITIONAL_PROBABILITY_BASED_EDEFAULT.equals(conditional_Probability_based);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (Conditional_Probability_based: ");
    result.append(conditional_Probability_based);
    result.append(')');
    return result.toString();
  }

} //NavieBayesImpl
