/**
 * generated by Xtext 2.26.0
 */
package assignment_2_ssda.xtext_ml.ass2.myDsl.util;

import assignment_2_ssda.xtext_ml.ass2.myDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see assignment_2_ssda.xtext_ml.ass2.myDsl.MyDslPackage
 * @generated
 */
public class MyDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MyDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MyDslSwitch<Adapter> modelSwitch =
    new MyDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseDiabetes_Prediction_System(Diabetes_Prediction_System object)
      {
        return createDiabetes_Prediction_SystemAdapter();
      }
      @Override
      public Adapter caseMedicines(Medicines object)
      {
        return createMedicinesAdapter();
      }
      @Override
      public Adapter caseSymptom(Symptom object)
      {
        return createSymptomAdapter();
      }
      @Override
      public Adapter casePolyuria(Polyuria object)
      {
        return createPolyuriaAdapter();
      }
      @Override
      public Adapter casePolydipsia(Polydipsia object)
      {
        return createPolydipsiaAdapter();
      }
      @Override
      public Adapter casesudden_weight_loss(sudden_weight_loss object)
      {
        return createsudden_weight_lossAdapter();
      }
      @Override
      public Adapter casePolyphagia(Polyphagia object)
      {
        return createPolyphagiaAdapter();
      }
      @Override
      public Adapter caseGenital_thrush(Genital_thrush object)
      {
        return createGenital_thrushAdapter();
      }
      @Override
      public Adapter casevisual_blurring(visual_blurring object)
      {
        return createvisual_blurringAdapter();
      }
      @Override
      public Adapter caseItching(Itching object)
      {
        return createItchingAdapter();
      }
      @Override
      public Adapter caseIrritability(Irritability object)
      {
        return createIrritabilityAdapter();
      }
      @Override
      public Adapter casedelayed_healing(delayed_healing object)
      {
        return createdelayed_healingAdapter();
      }
      @Override
      public Adapter casepartial_paresis(partial_paresis object)
      {
        return createpartial_paresisAdapter();
      }
      @Override
      public Adapter casemuscle_stiffness(muscle_stiffness object)
      {
        return createmuscle_stiffnessAdapter();
      }
      @Override
      public Adapter caseAlopecia(Alopecia object)
      {
        return createAlopeciaAdapter();
      }
      @Override
      public Adapter caseObesity(Obesity object)
      {
        return createObesityAdapter();
      }
      @Override
      public Adapter caseSugar_Test(Sugar_Test object)
      {
        return createSugar_TestAdapter();
      }
      @Override
      public Adapter caseDoctor(Doctor object)
      {
        return createDoctorAdapter();
      }
      @Override
      public Adapter casePatient(Patient object)
      {
        return createPatientAdapter();
      }
      @Override
      public Adapter casePredict_diabetes(Predict_diabetes object)
      {
        return createPredict_diabetesAdapter();
      }
      @Override
      public Adapter caseMachine_learning_Algorithms(Machine_learning_Algorithms object)
      {
        return createMachine_learning_AlgorithmsAdapter();
      }
      @Override
      public Adapter caseRandom_forest(Random_forest object)
      {
        return createRandom_forestAdapter();
      }
      @Override
      public Adapter caseSVM_Classifier(SVM_Classifier object)
      {
        return createSVM_ClassifierAdapter();
      }
      @Override
      public Adapter caseJ48Classifier(J48Classifier object)
      {
        return createJ48ClassifierAdapter();
      }
      @Override
      public Adapter caseNavieBayes(NavieBayes object)
      {
        return createNavieBayesAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.Diabetes_Prediction_System <em>Diabetes Prediction System</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.Diabetes_Prediction_System
   * @generated
   */
  public Adapter createDiabetes_Prediction_SystemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.Medicines <em>Medicines</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.Medicines
   * @generated
   */
  public Adapter createMedicinesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.Symptom <em>Symptom</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.Symptom
   * @generated
   */
  public Adapter createSymptomAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.Polyuria <em>Polyuria</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.Polyuria
   * @generated
   */
  public Adapter createPolyuriaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.Polydipsia <em>Polydipsia</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.Polydipsia
   * @generated
   */
  public Adapter createPolydipsiaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.sudden_weight_loss <em>sudden weight loss</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.sudden_weight_loss
   * @generated
   */
  public Adapter createsudden_weight_lossAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.Polyphagia <em>Polyphagia</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.Polyphagia
   * @generated
   */
  public Adapter createPolyphagiaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.Genital_thrush <em>Genital thrush</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.Genital_thrush
   * @generated
   */
  public Adapter createGenital_thrushAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.visual_blurring <em>visual blurring</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.visual_blurring
   * @generated
   */
  public Adapter createvisual_blurringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.Itching <em>Itching</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.Itching
   * @generated
   */
  public Adapter createItchingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.Irritability <em>Irritability</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.Irritability
   * @generated
   */
  public Adapter createIrritabilityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.delayed_healing <em>delayed healing</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.delayed_healing
   * @generated
   */
  public Adapter createdelayed_healingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.partial_paresis <em>partial paresis</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.partial_paresis
   * @generated
   */
  public Adapter createpartial_paresisAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.muscle_stiffness <em>muscle stiffness</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.muscle_stiffness
   * @generated
   */
  public Adapter createmuscle_stiffnessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.Alopecia <em>Alopecia</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.Alopecia
   * @generated
   */
  public Adapter createAlopeciaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.Obesity <em>Obesity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.Obesity
   * @generated
   */
  public Adapter createObesityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.Sugar_Test <em>Sugar Test</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.Sugar_Test
   * @generated
   */
  public Adapter createSugar_TestAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.Doctor <em>Doctor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.Doctor
   * @generated
   */
  public Adapter createDoctorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.Patient <em>Patient</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.Patient
   * @generated
   */
  public Adapter createPatientAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.Predict_diabetes <em>Predict diabetes</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.Predict_diabetes
   * @generated
   */
  public Adapter createPredict_diabetesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.Machine_learning_Algorithms <em>Machine learning Algorithms</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.Machine_learning_Algorithms
   * @generated
   */
  public Adapter createMachine_learning_AlgorithmsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.Random_forest <em>Random forest</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.Random_forest
   * @generated
   */
  public Adapter createRandom_forestAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.SVM_Classifier <em>SVM Classifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.SVM_Classifier
   * @generated
   */
  public Adapter createSVM_ClassifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.J48Classifier <em>J48 Classifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.J48Classifier
   * @generated
   */
  public Adapter createJ48ClassifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link assignment_2_ssda.xtext_ml.ass2.myDsl.NavieBayes <em>Navie Bayes</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see assignment_2_ssda.xtext_ml.ass2.myDsl.NavieBayes
   * @generated
   */
  public Adapter createNavieBayesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MyDslAdapterFactory
