/*
 * generated by Xtext 2.26.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package assignment_2_ssda.xtext_ml.ass2.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package assignment_2_ssda.xtext_ml.ass2.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import assignment_2_ssda.xtext_ml.ass2.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDiabetes_Prediction_System
entryRuleDiabetes_Prediction_System
:
{ before(grammarAccess.getDiabetes_Prediction_SystemRule()); }
	 ruleDiabetes_Prediction_System
{ after(grammarAccess.getDiabetes_Prediction_SystemRule()); } 
	 EOF 
;

// Rule Diabetes_Prediction_System
ruleDiabetes_Prediction_System 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDiabetes_Prediction_SystemAccess().getGroup()); }
		(rule__Diabetes_Prediction_System__Group__0)
		{ after(grammarAccess.getDiabetes_Prediction_SystemAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMedicines
entryRuleMedicines
:
{ before(grammarAccess.getMedicinesRule()); }
	 ruleMedicines
{ after(grammarAccess.getMedicinesRule()); } 
	 EOF 
;

// Rule Medicines
ruleMedicines 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMedicinesAccess().getGroup()); }
		(rule__Medicines__Group__0)
		{ after(grammarAccess.getMedicinesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSymptom
entryRuleSymptom
:
{ before(grammarAccess.getSymptomRule()); }
	 ruleSymptom
{ after(grammarAccess.getSymptomRule()); } 
	 EOF 
;

// Rule Symptom
ruleSymptom 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSymptomAccess().getAlternatives()); }
		(rule__Symptom__Alternatives)
		{ after(grammarAccess.getSymptomAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePolyuria
entryRulePolyuria
:
{ before(grammarAccess.getPolyuriaRule()); }
	 rulePolyuria
{ after(grammarAccess.getPolyuriaRule()); } 
	 EOF 
;

// Rule Polyuria
rulePolyuria 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPolyuriaAccess().getGroup()); }
		(rule__Polyuria__Group__0)
		{ after(grammarAccess.getPolyuriaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePolydipsia
entryRulePolydipsia
:
{ before(grammarAccess.getPolydipsiaRule()); }
	 rulePolydipsia
{ after(grammarAccess.getPolydipsiaRule()); } 
	 EOF 
;

// Rule Polydipsia
rulePolydipsia 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPolydipsiaAccess().getGroup()); }
		(rule__Polydipsia__Group__0)
		{ after(grammarAccess.getPolydipsiaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulesudden_weight_loss
entryRulesudden_weight_loss
:
{ before(grammarAccess.getSudden_weight_lossRule()); }
	 rulesudden_weight_loss
{ after(grammarAccess.getSudden_weight_lossRule()); } 
	 EOF 
;

// Rule sudden_weight_loss
rulesudden_weight_loss 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSudden_weight_lossAccess().getGroup()); }
		(rule__Sudden_weight_loss__Group__0)
		{ after(grammarAccess.getSudden_weight_lossAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePolyphagia
entryRulePolyphagia
:
{ before(grammarAccess.getPolyphagiaRule()); }
	 rulePolyphagia
{ after(grammarAccess.getPolyphagiaRule()); } 
	 EOF 
;

// Rule Polyphagia
rulePolyphagia 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPolyphagiaAccess().getGroup()); }
		(rule__Polyphagia__Group__0)
		{ after(grammarAccess.getPolyphagiaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGenital_thrush
entryRuleGenital_thrush
:
{ before(grammarAccess.getGenital_thrushRule()); }
	 ruleGenital_thrush
{ after(grammarAccess.getGenital_thrushRule()); } 
	 EOF 
;

// Rule Genital_thrush
ruleGenital_thrush 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGenital_thrushAccess().getGroup()); }
		(rule__Genital_thrush__Group__0)
		{ after(grammarAccess.getGenital_thrushAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevisual_blurring
entryRulevisual_blurring
:
{ before(grammarAccess.getVisual_blurringRule()); }
	 rulevisual_blurring
{ after(grammarAccess.getVisual_blurringRule()); } 
	 EOF 
;

// Rule visual_blurring
rulevisual_blurring 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVisual_blurringAccess().getGroup()); }
		(rule__Visual_blurring__Group__0)
		{ after(grammarAccess.getVisual_blurringAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleItching
entryRuleItching
:
{ before(grammarAccess.getItchingRule()); }
	 ruleItching
{ after(grammarAccess.getItchingRule()); } 
	 EOF 
;

// Rule Itching
ruleItching 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getItchingAccess().getGroup()); }
		(rule__Itching__Group__0)
		{ after(grammarAccess.getItchingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIrritability
entryRuleIrritability
:
{ before(grammarAccess.getIrritabilityRule()); }
	 ruleIrritability
{ after(grammarAccess.getIrritabilityRule()); } 
	 EOF 
;

// Rule Irritability
ruleIrritability 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIrritabilityAccess().getGroup()); }
		(rule__Irritability__Group__0)
		{ after(grammarAccess.getIrritabilityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuledelayed_healing
entryRuledelayed_healing
:
{ before(grammarAccess.getDelayed_healingRule()); }
	 ruledelayed_healing
{ after(grammarAccess.getDelayed_healingRule()); } 
	 EOF 
;

// Rule delayed_healing
ruledelayed_healing 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDelayed_healingAccess().getGroup()); }
		(rule__Delayed_healing__Group__0)
		{ after(grammarAccess.getDelayed_healingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulepartial_paresis
entryRulepartial_paresis
:
{ before(grammarAccess.getPartial_paresisRule()); }
	 rulepartial_paresis
{ after(grammarAccess.getPartial_paresisRule()); } 
	 EOF 
;

// Rule partial_paresis
rulepartial_paresis 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPartial_paresisAccess().getGroup()); }
		(rule__Partial_paresis__Group__0)
		{ after(grammarAccess.getPartial_paresisAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulemuscle_stiffness
entryRulemuscle_stiffness
:
{ before(grammarAccess.getMuscle_stiffnessRule()); }
	 rulemuscle_stiffness
{ after(grammarAccess.getMuscle_stiffnessRule()); } 
	 EOF 
;

// Rule muscle_stiffness
rulemuscle_stiffness 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMuscle_stiffnessAccess().getGroup()); }
		(rule__Muscle_stiffness__Group__0)
		{ after(grammarAccess.getMuscle_stiffnessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAlopecia
entryRuleAlopecia
:
{ before(grammarAccess.getAlopeciaRule()); }
	 ruleAlopecia
{ after(grammarAccess.getAlopeciaRule()); } 
	 EOF 
;

// Rule Alopecia
ruleAlopecia 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAlopeciaAccess().getGroup()); }
		(rule__Alopecia__Group__0)
		{ after(grammarAccess.getAlopeciaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObesity
entryRuleObesity
:
{ before(grammarAccess.getObesityRule()); }
	 ruleObesity
{ after(grammarAccess.getObesityRule()); } 
	 EOF 
;

// Rule Obesity
ruleObesity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObesityAccess().getGroup()); }
		(rule__Obesity__Group__0)
		{ after(grammarAccess.getObesityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSugar_Test
entryRuleSugar_Test
:
{ before(grammarAccess.getSugar_TestRule()); }
	 ruleSugar_Test
{ after(grammarAccess.getSugar_TestRule()); } 
	 EOF 
;

// Rule Sugar_Test
ruleSugar_Test 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSugar_TestAccess().getGroup()); }
		(rule__Sugar_Test__Group__0)
		{ after(grammarAccess.getSugar_TestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDoctor
entryRuleDoctor
:
{ before(grammarAccess.getDoctorRule()); }
	 ruleDoctor
{ after(grammarAccess.getDoctorRule()); } 
	 EOF 
;

// Rule Doctor
ruleDoctor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDoctorAccess().getGroup()); }
		(rule__Doctor__Group__0)
		{ after(grammarAccess.getDoctorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatient
entryRulePatient
:
{ before(grammarAccess.getPatientRule()); }
	 rulePatient
{ after(grammarAccess.getPatientRule()); } 
	 EOF 
;

// Rule Patient
rulePatient 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatientAccess().getGroup()); }
		(rule__Patient__Group__0)
		{ after(grammarAccess.getPatientAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredict_diabetes
entryRulePredict_diabetes
:
{ before(grammarAccess.getPredict_diabetesRule()); }
	 rulePredict_diabetes
{ after(grammarAccess.getPredict_diabetesRule()); } 
	 EOF 
;

// Rule Predict_diabetes
rulePredict_diabetes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredict_diabetesAccess().getGroup()); }
		(rule__Predict_diabetes__Group__0)
		{ after(grammarAccess.getPredict_diabetesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMachine_learning_Algorithms
entryRuleMachine_learning_Algorithms
:
{ before(grammarAccess.getMachine_learning_AlgorithmsRule()); }
	 ruleMachine_learning_Algorithms
{ after(grammarAccess.getMachine_learning_AlgorithmsRule()); } 
	 EOF 
;

// Rule Machine_learning_Algorithms
ruleMachine_learning_Algorithms 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMachine_learning_AlgorithmsAccess().getAlternatives()); }
		(rule__Machine_learning_Algorithms__Alternatives)
		{ after(grammarAccess.getMachine_learning_AlgorithmsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRandom_forest
entryRuleRandom_forest
:
{ before(grammarAccess.getRandom_forestRule()); }
	 ruleRandom_forest
{ after(grammarAccess.getRandom_forestRule()); } 
	 EOF 
;

// Rule Random_forest
ruleRandom_forest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRandom_forestAccess().getGroup()); }
		(rule__Random_forest__Group__0)
		{ after(grammarAccess.getRandom_forestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSVM_Classifier
entryRuleSVM_Classifier
:
{ before(grammarAccess.getSVM_ClassifierRule()); }
	 ruleSVM_Classifier
{ after(grammarAccess.getSVM_ClassifierRule()); } 
	 EOF 
;

// Rule SVM_Classifier
ruleSVM_Classifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSVM_ClassifierAccess().getGroup()); }
		(rule__SVM_Classifier__Group__0)
		{ after(grammarAccess.getSVM_ClassifierAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleJ48Classifier
entryRuleJ48Classifier
:
{ before(grammarAccess.getJ48ClassifierRule()); }
	 ruleJ48Classifier
{ after(grammarAccess.getJ48ClassifierRule()); } 
	 EOF 
;

// Rule J48Classifier
ruleJ48Classifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getJ48ClassifierAccess().getGroup()); }
		(rule__J48Classifier__Group__0)
		{ after(grammarAccess.getJ48ClassifierAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNavieBayes
entryRuleNavieBayes
:
{ before(grammarAccess.getNavieBayesRule()); }
	 ruleNavieBayes
{ after(grammarAccess.getNavieBayesRule()); } 
	 EOF 
;

// Rule NavieBayes
ruleNavieBayes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNavieBayesAccess().getGroup()); }
		(rule__NavieBayes__Group__0)
		{ after(grammarAccess.getNavieBayesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Symptom__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymptomAccess().getPolyuriaParserRuleCall_0()); }
		rulePolyuria
		{ after(grammarAccess.getSymptomAccess().getPolyuriaParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSymptomAccess().getPolydipsiaParserRuleCall_1()); }
		rulePolydipsia
		{ after(grammarAccess.getSymptomAccess().getPolydipsiaParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getSymptomAccess().getSudden_weight_lossParserRuleCall_2()); }
		rulesudden_weight_loss
		{ after(grammarAccess.getSymptomAccess().getSudden_weight_lossParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getSymptomAccess().getPolyphagiaParserRuleCall_3()); }
		rulePolyphagia
		{ after(grammarAccess.getSymptomAccess().getPolyphagiaParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getSymptomAccess().getGenital_thrushParserRuleCall_4()); }
		ruleGenital_thrush
		{ after(grammarAccess.getSymptomAccess().getGenital_thrushParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getSymptomAccess().getVisual_blurringParserRuleCall_5()); }
		rulevisual_blurring
		{ after(grammarAccess.getSymptomAccess().getVisual_blurringParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getSymptomAccess().getItchingParserRuleCall_6()); }
		ruleItching
		{ after(grammarAccess.getSymptomAccess().getItchingParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getSymptomAccess().getIrritabilityParserRuleCall_7()); }
		ruleIrritability
		{ after(grammarAccess.getSymptomAccess().getIrritabilityParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getSymptomAccess().getDelayed_healingParserRuleCall_8()); }
		ruledelayed_healing
		{ after(grammarAccess.getSymptomAccess().getDelayed_healingParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getSymptomAccess().getPartial_paresisParserRuleCall_9()); }
		rulepartial_paresis
		{ after(grammarAccess.getSymptomAccess().getPartial_paresisParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getSymptomAccess().getMuscle_stiffnessParserRuleCall_10()); }
		rulemuscle_stiffness
		{ after(grammarAccess.getSymptomAccess().getMuscle_stiffnessParserRuleCall_10()); }
	)
	|
	(
		{ before(grammarAccess.getSymptomAccess().getAlopeciaParserRuleCall_11()); }
		ruleAlopecia
		{ after(grammarAccess.getSymptomAccess().getAlopeciaParserRuleCall_11()); }
	)
	|
	(
		{ before(grammarAccess.getSymptomAccess().getObesityParserRuleCall_12()); }
		ruleObesity
		{ after(grammarAccess.getSymptomAccess().getObesityParserRuleCall_12()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine_learning_Algorithms__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMachine_learning_AlgorithmsAccess().getRandom_forestParserRuleCall_0()); }
		ruleRandom_forest
		{ after(grammarAccess.getMachine_learning_AlgorithmsAccess().getRandom_forestParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getMachine_learning_AlgorithmsAccess().getSVM_ClassifierParserRuleCall_1()); }
		ruleSVM_Classifier
		{ after(grammarAccess.getMachine_learning_AlgorithmsAccess().getSVM_ClassifierParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getMachine_learning_AlgorithmsAccess().getJ48ClassifierParserRuleCall_2()); }
		ruleJ48Classifier
		{ after(grammarAccess.getMachine_learning_AlgorithmsAccess().getJ48ClassifierParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getMachine_learning_AlgorithmsAccess().getNavieBayesParserRuleCall_3()); }
		ruleNavieBayes
		{ after(grammarAccess.getMachine_learning_AlgorithmsAccess().getNavieBayesParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Diabetes_Prediction_System__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Diabetes_Prediction_System__Group__0__Impl
	rule__Diabetes_Prediction_System__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Diabetes_Prediction_System__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiabetes_Prediction_SystemAccess().getDiabetes_prediction_SystemKeyword_0()); }
	'Diabetes_prediction_System:'
	{ after(grammarAccess.getDiabetes_Prediction_SystemAccess().getDiabetes_prediction_SystemKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Diabetes_Prediction_System__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Diabetes_Prediction_System__Group__1__Impl
	rule__Diabetes_Prediction_System__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Diabetes_Prediction_System__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiabetes_Prediction_SystemAccess().getNameAssignment_1()); }
	(rule__Diabetes_Prediction_System__NameAssignment_1)
	{ after(grammarAccess.getDiabetes_Prediction_SystemAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Diabetes_Prediction_System__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Diabetes_Prediction_System__Group__2__Impl
	rule__Diabetes_Prediction_System__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Diabetes_Prediction_System__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiabetes_Prediction_SystemAccess().getMedicinesAssignment_2()); }
	(rule__Diabetes_Prediction_System__MedicinesAssignment_2)*
	{ after(grammarAccess.getDiabetes_Prediction_SystemAccess().getMedicinesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Diabetes_Prediction_System__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Diabetes_Prediction_System__Group__3__Impl
	rule__Diabetes_Prediction_System__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Diabetes_Prediction_System__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiabetes_Prediction_SystemAccess().getSymptomAssignment_3()); }
	(rule__Diabetes_Prediction_System__SymptomAssignment_3)*
	{ after(grammarAccess.getDiabetes_Prediction_SystemAccess().getSymptomAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Diabetes_Prediction_System__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Diabetes_Prediction_System__Group__4__Impl
	rule__Diabetes_Prediction_System__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Diabetes_Prediction_System__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiabetes_Prediction_SystemAccess().getDoctorsAssignment_4()); }
	(rule__Diabetes_Prediction_System__DoctorsAssignment_4)*
	{ after(grammarAccess.getDiabetes_Prediction_SystemAccess().getDoctorsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Diabetes_Prediction_System__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Diabetes_Prediction_System__Group__5__Impl
	rule__Diabetes_Prediction_System__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Diabetes_Prediction_System__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDiabetes_Prediction_SystemAccess().getPatientAssignment_5()); }
	(rule__Diabetes_Prediction_System__PatientAssignment_5)*
	{ after(grammarAccess.getDiabetes_Prediction_SystemAccess().getPatientAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Diabetes_Prediction_System__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Diabetes_Prediction_System__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Diabetes_Prediction_System__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getDiabetes_Prediction_SystemAccess().getMachine_learning_AlgorithmsAssignment_6()); }
		(rule__Diabetes_Prediction_System__Machine_learning_AlgorithmsAssignment_6)
		{ after(grammarAccess.getDiabetes_Prediction_SystemAccess().getMachine_learning_AlgorithmsAssignment_6()); }
	)
	(
		{ before(grammarAccess.getDiabetes_Prediction_SystemAccess().getMachine_learning_AlgorithmsAssignment_6()); }
		(rule__Diabetes_Prediction_System__Machine_learning_AlgorithmsAssignment_6)*
		{ after(grammarAccess.getDiabetes_Prediction_SystemAccess().getMachine_learning_AlgorithmsAssignment_6()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Medicines__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Medicines__Group__0__Impl
	rule__Medicines__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Medicines__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMedicinesAccess().getMedicinesKeyword_0()); }
	'Medicines'
	{ after(grammarAccess.getMedicinesAccess().getMedicinesKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Medicines__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Medicines__Group__1__Impl
	rule__Medicines__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Medicines__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMedicinesAccess().getMedicine_nameAssignment_1()); }
	(rule__Medicines__Medicine_nameAssignment_1)
	{ after(grammarAccess.getMedicinesAccess().getMedicine_nameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Medicines__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Medicines__Group__2__Impl
	rule__Medicines__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Medicines__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMedicinesAccess().getMedicine_dossageKeyword_2()); }
	'Medicine_dossage:'
	{ after(grammarAccess.getMedicinesAccess().getMedicine_dossageKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Medicines__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Medicines__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Medicines__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMedicinesAccess().getMedicine_dossageAssignment_3()); }
	(rule__Medicines__Medicine_dossageAssignment_3)
	{ after(grammarAccess.getMedicinesAccess().getMedicine_dossageAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Polyuria__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Polyuria__Group__0__Impl
	rule__Polyuria__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Polyuria__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyuriaAccess().getPolyuriaKeyword_0()); }
	'Polyuria'
	{ after(grammarAccess.getPolyuriaAccess().getPolyuriaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Polyuria__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Polyuria__Group__1__Impl
	rule__Polyuria__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Polyuria__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyuriaAccess().getNameKeyword_1()); }
	'name:'
	{ after(grammarAccess.getPolyuriaAccess().getNameKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Polyuria__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Polyuria__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Polyuria__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyuriaAccess().getNameAssignment_2()); }
	(rule__Polyuria__NameAssignment_2)
	{ after(grammarAccess.getPolyuriaAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Polydipsia__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Polydipsia__Group__0__Impl
	rule__Polydipsia__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Polydipsia__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolydipsiaAccess().getPolydipsiaKeyword_0()); }
	'Polydipsia'
	{ after(grammarAccess.getPolydipsiaAccess().getPolydipsiaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Polydipsia__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Polydipsia__Group__1__Impl
	rule__Polydipsia__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Polydipsia__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolydipsiaAccess().getNameKeyword_1()); }
	'name:'
	{ after(grammarAccess.getPolydipsiaAccess().getNameKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Polydipsia__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Polydipsia__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Polydipsia__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolydipsiaAccess().getNameAssignment_2()); }
	(rule__Polydipsia__NameAssignment_2)
	{ after(grammarAccess.getPolydipsiaAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sudden_weight_loss__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sudden_weight_loss__Group__0__Impl
	rule__Sudden_weight_loss__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sudden_weight_loss__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSudden_weight_lossAccess().getSudden_weight_lossKeyword_0()); }
	'sudden_weight_loss'
	{ after(grammarAccess.getSudden_weight_lossAccess().getSudden_weight_lossKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sudden_weight_loss__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sudden_weight_loss__Group__1__Impl
	rule__Sudden_weight_loss__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sudden_weight_loss__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSudden_weight_lossAccess().getNameKeyword_1()); }
	'name:'
	{ after(grammarAccess.getSudden_weight_lossAccess().getNameKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sudden_weight_loss__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sudden_weight_loss__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sudden_weight_loss__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSudden_weight_lossAccess().getNameAssignment_2()); }
	(rule__Sudden_weight_loss__NameAssignment_2)
	{ after(grammarAccess.getSudden_weight_lossAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Polyphagia__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Polyphagia__Group__0__Impl
	rule__Polyphagia__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Polyphagia__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyphagiaAccess().getPolyphagiaKeyword_0()); }
	'Polyphagia'
	{ after(grammarAccess.getPolyphagiaAccess().getPolyphagiaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Polyphagia__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Polyphagia__Group__1__Impl
	rule__Polyphagia__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Polyphagia__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyphagiaAccess().getNameKeyword_1()); }
	'name:'
	{ after(grammarAccess.getPolyphagiaAccess().getNameKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Polyphagia__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Polyphagia__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Polyphagia__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyphagiaAccess().getNameAssignment_2()); }
	(rule__Polyphagia__NameAssignment_2)
	{ after(grammarAccess.getPolyphagiaAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Genital_thrush__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Genital_thrush__Group__0__Impl
	rule__Genital_thrush__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Genital_thrush__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGenital_thrushAccess().getGenital_thrushKeyword_0()); }
	'Genital_thrush'
	{ after(grammarAccess.getGenital_thrushAccess().getGenital_thrushKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Genital_thrush__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Genital_thrush__Group__1__Impl
	rule__Genital_thrush__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Genital_thrush__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGenital_thrushAccess().getNameKeyword_1()); }
	'name:'
	{ after(grammarAccess.getGenital_thrushAccess().getNameKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Genital_thrush__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Genital_thrush__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Genital_thrush__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGenital_thrushAccess().getNameAssignment_2()); }
	(rule__Genital_thrush__NameAssignment_2)
	{ after(grammarAccess.getGenital_thrushAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Visual_blurring__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Visual_blurring__Group__0__Impl
	rule__Visual_blurring__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Visual_blurring__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVisual_blurringAccess().getVisual_blurringKeyword_0()); }
	'visual_blurring'
	{ after(grammarAccess.getVisual_blurringAccess().getVisual_blurringKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Visual_blurring__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Visual_blurring__Group__1__Impl
	rule__Visual_blurring__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Visual_blurring__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVisual_blurringAccess().getNameKeyword_1()); }
	'name:'
	{ after(grammarAccess.getVisual_blurringAccess().getNameKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Visual_blurring__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Visual_blurring__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Visual_blurring__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVisual_blurringAccess().getNameAssignment_2()); }
	(rule__Visual_blurring__NameAssignment_2)
	{ after(grammarAccess.getVisual_blurringAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Itching__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Itching__Group__0__Impl
	rule__Itching__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Itching__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItchingAccess().getItchingKeyword_0()); }
	'Itching'
	{ after(grammarAccess.getItchingAccess().getItchingKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Itching__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Itching__Group__1__Impl
	rule__Itching__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Itching__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItchingAccess().getNameKeyword_1()); }
	'name:'
	{ after(grammarAccess.getItchingAccess().getNameKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Itching__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Itching__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Itching__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItchingAccess().getNameAssignment_2()); }
	(rule__Itching__NameAssignment_2)
	{ after(grammarAccess.getItchingAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Irritability__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Irritability__Group__0__Impl
	rule__Irritability__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Irritability__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIrritabilityAccess().getIrritabilityKeyword_0()); }
	'Irritability'
	{ after(grammarAccess.getIrritabilityAccess().getIrritabilityKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Irritability__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Irritability__Group__1__Impl
	rule__Irritability__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Irritability__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIrritabilityAccess().getNameKeyword_1()); }
	'name:'
	{ after(grammarAccess.getIrritabilityAccess().getNameKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Irritability__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Irritability__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Irritability__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIrritabilityAccess().getNameAssignment_2()); }
	(rule__Irritability__NameAssignment_2)
	{ after(grammarAccess.getIrritabilityAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Delayed_healing__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delayed_healing__Group__0__Impl
	rule__Delayed_healing__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Delayed_healing__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDelayed_healingAccess().getDelayed_healingKeyword_0()); }
	'delayed_healing'
	{ after(grammarAccess.getDelayed_healingAccess().getDelayed_healingKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delayed_healing__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delayed_healing__Group__1__Impl
	rule__Delayed_healing__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Delayed_healing__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDelayed_healingAccess().getNameKeyword_1()); }
	'name:'
	{ after(grammarAccess.getDelayed_healingAccess().getNameKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delayed_healing__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Delayed_healing__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Delayed_healing__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDelayed_healingAccess().getNameAssignment_2()); }
	(rule__Delayed_healing__NameAssignment_2)
	{ after(grammarAccess.getDelayed_healingAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Partial_paresis__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Partial_paresis__Group__0__Impl
	rule__Partial_paresis__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Partial_paresis__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPartial_paresisAccess().getPartial_paresisKeyword_0()); }
	'partial_paresis'
	{ after(grammarAccess.getPartial_paresisAccess().getPartial_paresisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Partial_paresis__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Partial_paresis__Group__1__Impl
	rule__Partial_paresis__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Partial_paresis__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPartial_paresisAccess().getNameKeyword_1()); }
	'name:'
	{ after(grammarAccess.getPartial_paresisAccess().getNameKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Partial_paresis__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Partial_paresis__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Partial_paresis__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPartial_paresisAccess().getNameAssignment_2()); }
	(rule__Partial_paresis__NameAssignment_2)
	{ after(grammarAccess.getPartial_paresisAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Muscle_stiffness__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Muscle_stiffness__Group__0__Impl
	rule__Muscle_stiffness__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Muscle_stiffness__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMuscle_stiffnessAccess().getMuscle_stiffnessKeyword_0()); }
	'muscle_stiffness'
	{ after(grammarAccess.getMuscle_stiffnessAccess().getMuscle_stiffnessKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Muscle_stiffness__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Muscle_stiffness__Group__1__Impl
	rule__Muscle_stiffness__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Muscle_stiffness__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMuscle_stiffnessAccess().getNameKeyword_1()); }
	'name:'
	{ after(grammarAccess.getMuscle_stiffnessAccess().getNameKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Muscle_stiffness__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Muscle_stiffness__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Muscle_stiffness__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMuscle_stiffnessAccess().getNameAssignment_2()); }
	(rule__Muscle_stiffness__NameAssignment_2)
	{ after(grammarAccess.getMuscle_stiffnessAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Alopecia__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Alopecia__Group__0__Impl
	rule__Alopecia__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Alopecia__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlopeciaAccess().getAlopeciaKeyword_0()); }
	'Alopecia'
	{ after(grammarAccess.getAlopeciaAccess().getAlopeciaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Alopecia__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Alopecia__Group__1__Impl
	rule__Alopecia__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Alopecia__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlopeciaAccess().getNameKeyword_1()); }
	'name:'
	{ after(grammarAccess.getAlopeciaAccess().getNameKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Alopecia__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Alopecia__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Alopecia__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAlopeciaAccess().getNameAssignment_2()); }
	(rule__Alopecia__NameAssignment_2)
	{ after(grammarAccess.getAlopeciaAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Obesity__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Obesity__Group__0__Impl
	rule__Obesity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Obesity__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObesityAccess().getObesityKeyword_0()); }
	'Obesity'
	{ after(grammarAccess.getObesityAccess().getObesityKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Obesity__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Obesity__Group__1__Impl
	rule__Obesity__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Obesity__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObesityAccess().getNameKeyword_1()); }
	'name:'
	{ after(grammarAccess.getObesityAccess().getNameKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Obesity__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Obesity__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Obesity__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObesityAccess().getNameAssignment_2()); }
	(rule__Obesity__NameAssignment_2)
	{ after(grammarAccess.getObesityAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sugar_Test__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sugar_Test__Group__0__Impl
	rule__Sugar_Test__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sugar_Test__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSugar_TestAccess().getSugar_testKeyword_0()); }
	'Sugar_test'
	{ after(grammarAccess.getSugar_TestAccess().getSugar_testKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sugar_Test__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sugar_Test__Group__1__Impl
	rule__Sugar_Test__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sugar_Test__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSugar_TestAccess().getPrevious_blood_sugarKeyword_1()); }
	'Previous_blood_sugar'
	{ after(grammarAccess.getSugar_TestAccess().getPrevious_blood_sugarKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sugar_Test__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sugar_Test__Group__2__Impl
	rule__Sugar_Test__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Sugar_Test__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSugar_TestAccess().getPrevious_blood_sugarAssignment_2()); }
	(rule__Sugar_Test__Previous_blood_sugarAssignment_2)
	{ after(grammarAccess.getSugar_TestAccess().getPrevious_blood_sugarAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sugar_Test__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sugar_Test__Group__3__Impl
	rule__Sugar_Test__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Sugar_Test__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSugar_TestAccess().getCurrent_blood_sugarKeyword_3()); }
	'Current_blood_sugar'
	{ after(grammarAccess.getSugar_TestAccess().getCurrent_blood_sugarKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sugar_Test__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sugar_Test__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sugar_Test__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSugar_TestAccess().getCurrent_blood_sugarAssignment_4()); }
	(rule__Sugar_Test__Current_blood_sugarAssignment_4)
	{ after(grammarAccess.getSugar_TestAccess().getCurrent_blood_sugarAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Doctor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Doctor__Group__0__Impl
	rule__Doctor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Doctor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoctorAccess().getDoctorKeyword_0()); }
	'Doctor'
	{ after(grammarAccess.getDoctorAccess().getDoctorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Doctor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Doctor__Group__1__Impl
	rule__Doctor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Doctor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoctorAccess().getNameAssignment_1()); }
	(rule__Doctor__NameAssignment_1)
	{ after(grammarAccess.getDoctorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Doctor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Doctor__Group__2__Impl
	rule__Doctor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Doctor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoctorAccess().getDoctor_specailizationKeyword_2()); }
	'Doctor_specailization'
	{ after(grammarAccess.getDoctorAccess().getDoctor_specailizationKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Doctor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Doctor__Group__3__Impl
	rule__Doctor__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Doctor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoctorAccess().getDoctor_specailizationAssignment_3()); }
	(rule__Doctor__Doctor_specailizationAssignment_3)
	{ after(grammarAccess.getDoctorAccess().getDoctor_specailizationAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Doctor__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Doctor__Group__4__Impl
	rule__Doctor__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Doctor__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoctorAccess().getMedicinesAssignment_4()); }
	(rule__Doctor__MedicinesAssignment_4)*
	{ after(grammarAccess.getDoctorAccess().getMedicinesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Doctor__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Doctor__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Doctor__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoctorAccess().getSymptomsAssignment_5()); }
	(rule__Doctor__SymptomsAssignment_5)*
	{ after(grammarAccess.getDoctorAccess().getSymptomsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Patient__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Patient__Group__0__Impl
	rule__Patient__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatientAccess().getPatientKeyword_0()); }
	'Patient'
	{ after(grammarAccess.getPatientAccess().getPatientKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Patient__Group__1__Impl
	rule__Patient__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatientAccess().getNameAssignment_1()); }
	(rule__Patient__NameAssignment_1)
	{ after(grammarAccess.getPatientAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Patient__Group__2__Impl
	rule__Patient__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatientAccess().getPatient_GenderKeyword_2()); }
	'Patient_Gender'
	{ after(grammarAccess.getPatientAccess().getPatient_GenderKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Patient__Group__3__Impl
	rule__Patient__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatientAccess().getPatient_GenderAssignment_3()); }
	(rule__Patient__Patient_GenderAssignment_3)
	{ after(grammarAccess.getPatientAccess().getPatient_GenderAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Patient__Group__4__Impl
	rule__Patient__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatientAccess().getPatient_AgeKeyword_4()); }
	'Patient_Age'
	{ after(grammarAccess.getPatientAccess().getPatient_AgeKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Patient__Group__5__Impl
	rule__Patient__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatientAccess().getPatient_AgeAssignment_5()); }
	(rule__Patient__Patient_AgeAssignment_5)
	{ after(grammarAccess.getPatientAccess().getPatient_AgeAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Patient__Group__6__Impl
	rule__Patient__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatientAccess().getPatient_HeightKeyword_6()); }
	'Patient_Height'
	{ after(grammarAccess.getPatientAccess().getPatient_HeightKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Patient__Group__7__Impl
	rule__Patient__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatientAccess().getPatient_HeightAssignment_7()); }
	(rule__Patient__Patient_HeightAssignment_7)
	{ after(grammarAccess.getPatientAccess().getPatient_HeightAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Patient__Group__8__Impl
	rule__Patient__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatientAccess().getPatient_WeightKeyword_8()); }
	'Patient_Weight'
	{ after(grammarAccess.getPatientAccess().getPatient_WeightKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Patient__Group__9__Impl
	rule__Patient__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatientAccess().getPatient_WeightAssignment_9()); }
	(rule__Patient__Patient_WeightAssignment_9)
	{ after(grammarAccess.getPatientAccess().getPatient_WeightAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Patient__Group__10__Impl
	rule__Patient__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatientAccess().getPatients_blood_pressureKeyword_10()); }
	'patients_blood_pressure'
	{ after(grammarAccess.getPatientAccess().getPatients_blood_pressureKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Patient__Group__11__Impl
	rule__Patient__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatientAccess().getPatient_blood_pressureAssignment_11()); }
	(rule__Patient__Patient_blood_pressureAssignment_11)
	{ after(grammarAccess.getPatientAccess().getPatient_blood_pressureAssignment_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__12
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Patient__Group__12__Impl
	rule__Patient__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__12__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatientAccess().getPulse_rateKeyword_12()); }
	'pulse_rate'
	{ after(grammarAccess.getPatientAccess().getPulse_rateKeyword_12()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__13
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Patient__Group__13__Impl
	rule__Patient__Group__14
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__13__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatientAccess().getPulse_rateAssignment_13()); }
	(rule__Patient__Pulse_rateAssignment_13)
	{ after(grammarAccess.getPatientAccess().getPulse_rateAssignment_13()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__14
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Patient__Group__14__Impl
	rule__Patient__Group__15
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__14__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getPatientAccess().getSymptomsAssignment_14()); }
		(rule__Patient__SymptomsAssignment_14)
		{ after(grammarAccess.getPatientAccess().getSymptomsAssignment_14()); }
	)
	(
		{ before(grammarAccess.getPatientAccess().getSymptomsAssignment_14()); }
		(rule__Patient__SymptomsAssignment_14)*
		{ after(grammarAccess.getPatientAccess().getSymptomsAssignment_14()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__15
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Patient__Group__15__Impl
	rule__Patient__Group__16
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__15__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatientAccess().getMedicinesAssignment_15()); }
	(rule__Patient__MedicinesAssignment_15)*
	{ after(grammarAccess.getPatientAccess().getMedicinesAssignment_15()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__16
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Patient__Group__16__Impl
	rule__Patient__Group__17
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__16__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getPatientAccess().getSugar_testsAssignment_16()); }
		(rule__Patient__Sugar_testsAssignment_16)
		{ after(grammarAccess.getPatientAccess().getSugar_testsAssignment_16()); }
	)
	(
		{ before(grammarAccess.getPatientAccess().getSugar_testsAssignment_16()); }
		(rule__Patient__Sugar_testsAssignment_16)*
		{ after(grammarAccess.getPatientAccess().getSugar_testsAssignment_16()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__17
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Patient__Group__17__Impl
	rule__Patient__Group__18
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__17__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatientAccess().getDoctorKeyword_17()); }
	'doctor'
	{ after(grammarAccess.getPatientAccess().getDoctorKeyword_17()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__18
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Patient__Group__18__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Group__18__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getPatientAccess().getDOCTORSAssignment_18()); }
		(rule__Patient__DOCTORSAssignment_18)
		{ after(grammarAccess.getPatientAccess().getDOCTORSAssignment_18()); }
	)
	(
		{ before(grammarAccess.getPatientAccess().getDOCTORSAssignment_18()); }
		(rule__Patient__DOCTORSAssignment_18)*
		{ after(grammarAccess.getPatientAccess().getDOCTORSAssignment_18()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Predict_diabetes__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predict_diabetes__Group__0__Impl
	rule__Predict_diabetes__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Predict_diabetes__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredict_diabetesAccess().getPredict_diabetesKeyword_0()); }
	'Predict_diabetes'
	{ after(grammarAccess.getPredict_diabetesAccess().getPredict_diabetesKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predict_diabetes__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Predict_diabetes__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Predict_diabetes__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredict_diabetesAccess().getNameAssignment_1()); }
	(rule__Predict_diabetes__NameAssignment_1)
	{ after(grammarAccess.getPredict_diabetesAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Random_forest__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Random_forest__Group__0__Impl
	rule__Random_forest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Random_forest__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRandom_forestAccess().getRandom_forestKeyword_0()); }
	'Random_forest'
	{ after(grammarAccess.getRandom_forestAccess().getRandom_forestKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Random_forest__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Random_forest__Group__1__Impl
	rule__Random_forest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Random_forest__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRandom_forestAccess().getCreate_treesKeyword_1()); }
	'create_trees'
	{ after(grammarAccess.getRandom_forestAccess().getCreate_treesKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Random_forest__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Random_forest__Group__2__Impl
	rule__Random_forest__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Random_forest__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRandom_forestAccess().getCreate_treesAssignment_2()); }
	(rule__Random_forest__Create_treesAssignment_2)
	{ after(grammarAccess.getRandom_forestAccess().getCreate_treesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Random_forest__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Random_forest__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Random_forest__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRandom_forestAccess().getPredict_diabetesAssignment_3()); }
	(rule__Random_forest__Predict_diabetesAssignment_3)
	{ after(grammarAccess.getRandom_forestAccess().getPredict_diabetesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SVM_Classifier__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM_Classifier__Group__0__Impl
	rule__SVM_Classifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM_Classifier__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVM_ClassifierAccess().getSVM_ClassifierKeyword_0()); }
	'SVM_Classifier'
	{ after(grammarAccess.getSVM_ClassifierAccess().getSVM_ClassifierKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM_Classifier__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM_Classifier__Group__1__Impl
	rule__SVM_Classifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM_Classifier__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVM_ClassifierAccess().getKernelKeyword_1()); }
	'kernel:'
	{ after(grammarAccess.getSVM_ClassifierAccess().getKernelKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM_Classifier__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM_Classifier__Group__2__Impl
	rule__SVM_Classifier__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM_Classifier__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVM_ClassifierAccess().getKernelAssignment_2()); }
	(rule__SVM_Classifier__KernelAssignment_2)
	{ after(grammarAccess.getSVM_ClassifierAccess().getKernelAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM_Classifier__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM_Classifier__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM_Classifier__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVM_ClassifierAccess().getPredict_diabetesAssignment_3()); }
	(rule__SVM_Classifier__Predict_diabetesAssignment_3)
	{ after(grammarAccess.getSVM_ClassifierAccess().getPredict_diabetesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__J48Classifier__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__J48Classifier__Group__0__Impl
	rule__J48Classifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__J48Classifier__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJ48ClassifierAccess().getJ48ClassifierKeyword_0()); }
	'J48Classifier'
	{ after(grammarAccess.getJ48ClassifierAccess().getJ48ClassifierKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__J48Classifier__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__J48Classifier__Group__1__Impl
	rule__J48Classifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__J48Classifier__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJ48ClassifierAccess().getSet_pruned_treesKeyword_1()); }
	'set_pruned_trees:'
	{ after(grammarAccess.getJ48ClassifierAccess().getSet_pruned_treesKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__J48Classifier__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__J48Classifier__Group__2__Impl
	rule__J48Classifier__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__J48Classifier__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJ48ClassifierAccess().getSet_pruned_treesAssignment_2()); }
	(rule__J48Classifier__Set_pruned_treesAssignment_2)
	{ after(grammarAccess.getJ48ClassifierAccess().getSet_pruned_treesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__J48Classifier__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__J48Classifier__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__J48Classifier__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJ48ClassifierAccess().getPredict_diabetesAssignment_3()); }
	(rule__J48Classifier__Predict_diabetesAssignment_3)
	{ after(grammarAccess.getJ48ClassifierAccess().getPredict_diabetesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NavieBayes__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NavieBayes__Group__0__Impl
	rule__NavieBayes__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NavieBayes__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNavieBayesAccess().getNavieBayesKeyword_0()); }
	'NavieBayes'
	{ after(grammarAccess.getNavieBayesAccess().getNavieBayesKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavieBayes__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NavieBayes__Group__1__Impl
	rule__NavieBayes__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NavieBayes__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNavieBayesAccess().getConditional_Probability_basedKeyword_1()); }
	'Conditional_Probability_based:'
	{ after(grammarAccess.getNavieBayesAccess().getConditional_Probability_basedKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavieBayes__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NavieBayes__Group__2__Impl
	rule__NavieBayes__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NavieBayes__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNavieBayesAccess().getConditional_Probability_basedAssignment_2()); }
	(rule__NavieBayes__Conditional_Probability_basedAssignment_2)
	{ after(grammarAccess.getNavieBayesAccess().getConditional_Probability_basedAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavieBayes__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NavieBayes__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NavieBayes__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNavieBayesAccess().getPredict_diabetesAssignment_3()); }
	(rule__NavieBayes__Predict_diabetesAssignment_3)
	{ after(grammarAccess.getNavieBayesAccess().getPredict_diabetesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Diabetes_Prediction_System__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiabetes_Prediction_SystemAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDiabetes_Prediction_SystemAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Diabetes_Prediction_System__MedicinesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiabetes_Prediction_SystemAccess().getMedicinesMedicinesParserRuleCall_2_0()); }
		ruleMedicines
		{ after(grammarAccess.getDiabetes_Prediction_SystemAccess().getMedicinesMedicinesParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Diabetes_Prediction_System__SymptomAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiabetes_Prediction_SystemAccess().getSymptomSymptomParserRuleCall_3_0()); }
		ruleSymptom
		{ after(grammarAccess.getDiabetes_Prediction_SystemAccess().getSymptomSymptomParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Diabetes_Prediction_System__DoctorsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiabetes_Prediction_SystemAccess().getDoctorsDoctorParserRuleCall_4_0()); }
		ruleDoctor
		{ after(grammarAccess.getDiabetes_Prediction_SystemAccess().getDoctorsDoctorParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Diabetes_Prediction_System__PatientAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiabetes_Prediction_SystemAccess().getPatientPatientParserRuleCall_5_0()); }
		rulePatient
		{ after(grammarAccess.getDiabetes_Prediction_SystemAccess().getPatientPatientParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Diabetes_Prediction_System__Machine_learning_AlgorithmsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDiabetes_Prediction_SystemAccess().getMachine_learning_AlgorithmsMachine_learning_AlgorithmsParserRuleCall_6_0()); }
		ruleMachine_learning_Algorithms
		{ after(grammarAccess.getDiabetes_Prediction_SystemAccess().getMachine_learning_AlgorithmsMachine_learning_AlgorithmsParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Medicines__Medicine_nameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMedicinesAccess().getMedicine_nameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMedicinesAccess().getMedicine_nameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Medicines__Medicine_dossageAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMedicinesAccess().getMedicine_dossageSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getMedicinesAccess().getMedicine_dossageSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Polyuria__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolyuriaAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getPolyuriaAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Polydipsia__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolydipsiaAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getPolydipsiaAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sudden_weight_loss__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSudden_weight_lossAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getSudden_weight_lossAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Polyphagia__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolyphagiaAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getPolyphagiaAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Genital_thrush__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGenital_thrushAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getGenital_thrushAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Visual_blurring__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVisual_blurringAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getVisual_blurringAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Itching__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getItchingAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getItchingAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Irritability__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIrritabilityAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getIrritabilityAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Delayed_healing__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDelayed_healingAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getDelayed_healingAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Partial_paresis__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPartial_paresisAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getPartial_paresisAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Muscle_stiffness__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMuscle_stiffnessAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getMuscle_stiffnessAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Alopecia__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlopeciaAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getAlopeciaAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Obesity__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObesityAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getObesityAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sugar_Test__Previous_blood_sugarAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSugar_TestAccess().getPrevious_blood_sugarSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getSugar_TestAccess().getPrevious_blood_sugarSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sugar_Test__Current_blood_sugarAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSugar_TestAccess().getCurrent_blood_sugarSTRINGTerminalRuleCall_4_0()); }
		RULE_STRING
		{ after(grammarAccess.getSugar_TestAccess().getCurrent_blood_sugarSTRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Doctor__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoctorAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDoctorAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Doctor__Doctor_specailizationAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoctorAccess().getDoctor_specailizationSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getDoctorAccess().getDoctor_specailizationSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Doctor__MedicinesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoctorAccess().getMedicinesMedicinesParserRuleCall_4_0()); }
		ruleMedicines
		{ after(grammarAccess.getDoctorAccess().getMedicinesMedicinesParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Doctor__SymptomsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoctorAccess().getSymptomsSymptomParserRuleCall_5_0()); }
		ruleSymptom
		{ after(grammarAccess.getDoctorAccess().getSymptomsSymptomParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatientAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPatientAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Patient_GenderAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatientAccess().getPatient_GenderIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getPatientAccess().getPatient_GenderIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Patient_AgeAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatientAccess().getPatient_AgeINTTerminalRuleCall_5_0()); }
		RULE_INT
		{ after(grammarAccess.getPatientAccess().getPatient_AgeINTTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Patient_HeightAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatientAccess().getPatient_HeightSTRINGTerminalRuleCall_7_0()); }
		RULE_STRING
		{ after(grammarAccess.getPatientAccess().getPatient_HeightSTRINGTerminalRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Patient_WeightAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatientAccess().getPatient_WeightSTRINGTerminalRuleCall_9_0()); }
		RULE_STRING
		{ after(grammarAccess.getPatientAccess().getPatient_WeightSTRINGTerminalRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Patient_blood_pressureAssignment_11
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatientAccess().getPatient_blood_pressureINTTerminalRuleCall_11_0()); }
		RULE_INT
		{ after(grammarAccess.getPatientAccess().getPatient_blood_pressureINTTerminalRuleCall_11_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Pulse_rateAssignment_13
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatientAccess().getPulse_rateINTTerminalRuleCall_13_0()); }
		RULE_INT
		{ after(grammarAccess.getPatientAccess().getPulse_rateINTTerminalRuleCall_13_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__SymptomsAssignment_14
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatientAccess().getSymptomsSymptomParserRuleCall_14_0()); }
		ruleSymptom
		{ after(grammarAccess.getPatientAccess().getSymptomsSymptomParserRuleCall_14_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__MedicinesAssignment_15
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatientAccess().getMedicinesMedicinesParserRuleCall_15_0()); }
		ruleMedicines
		{ after(grammarAccess.getPatientAccess().getMedicinesMedicinesParserRuleCall_15_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__Sugar_testsAssignment_16
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatientAccess().getSugar_testsSugar_TestParserRuleCall_16_0()); }
		ruleSugar_Test
		{ after(grammarAccess.getPatientAccess().getSugar_testsSugar_TestParserRuleCall_16_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Patient__DOCTORSAssignment_18
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatientAccess().getDOCTORSDoctorCrossReference_18_0()); }
		(
			{ before(grammarAccess.getPatientAccess().getDOCTORSDoctorIDTerminalRuleCall_18_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPatientAccess().getDOCTORSDoctorIDTerminalRuleCall_18_0_1()); }
		)
		{ after(grammarAccess.getPatientAccess().getDOCTORSDoctorCrossReference_18_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Predict_diabetes__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredict_diabetesAccess().getNameINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getPredict_diabetesAccess().getNameINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Random_forest__Create_treesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRandom_forestAccess().getCreate_treesSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getRandom_forestAccess().getCreate_treesSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Random_forest__Predict_diabetesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRandom_forestAccess().getPredict_diabetesPredict_diabetesParserRuleCall_3_0()); }
		rulePredict_diabetes
		{ after(grammarAccess.getRandom_forestAccess().getPredict_diabetesPredict_diabetesParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM_Classifier__KernelAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSVM_ClassifierAccess().getKernelSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getSVM_ClassifierAccess().getKernelSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM_Classifier__Predict_diabetesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSVM_ClassifierAccess().getPredict_diabetesPredict_diabetesParserRuleCall_3_0()); }
		rulePredict_diabetes
		{ after(grammarAccess.getSVM_ClassifierAccess().getPredict_diabetesPredict_diabetesParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__J48Classifier__Set_pruned_treesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJ48ClassifierAccess().getSet_pruned_treesSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getJ48ClassifierAccess().getSet_pruned_treesSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__J48Classifier__Predict_diabetesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJ48ClassifierAccess().getPredict_diabetesPredict_diabetesParserRuleCall_3_0()); }
		rulePredict_diabetes
		{ after(grammarAccess.getJ48ClassifierAccess().getPredict_diabetesPredict_diabetesParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavieBayes__Conditional_Probability_basedAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNavieBayesAccess().getConditional_Probability_basedSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getNavieBayesAccess().getConditional_Probability_basedSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NavieBayes__Predict_diabetesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNavieBayesAccess().getPredict_diabetesPredict_diabetesParserRuleCall_3_0()); }
		rulePredict_diabetes
		{ after(grammarAccess.getNavieBayesAccess().getPredict_diabetesPredict_diabetesParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
