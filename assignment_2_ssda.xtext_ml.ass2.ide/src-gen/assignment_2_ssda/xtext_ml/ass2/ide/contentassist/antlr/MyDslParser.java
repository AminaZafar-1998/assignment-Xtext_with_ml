/*
 * generated by Xtext 2.26.0
 */
package assignment_2_ssda.xtext_ml.ass2.ide.contentassist.antlr;

import assignment_2_ssda.xtext_ml.ass2.ide.contentassist.antlr.internal.InternalMyDslParser;
import assignment_2_ssda.xtext_ml.ass2.services.MyDslGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSymptomAccess().getAlternatives(), "rule__Symptom__Alternatives");
			builder.put(grammarAccess.getMachine_learning_AlgorithmsAccess().getAlternatives(), "rule__Machine_learning_Algorithms__Alternatives");
			builder.put(grammarAccess.getDiabetes_Prediction_SystemAccess().getGroup(), "rule__Diabetes_Prediction_System__Group__0");
			builder.put(grammarAccess.getMedicinesAccess().getGroup(), "rule__Medicines__Group__0");
			builder.put(grammarAccess.getPolyuriaAccess().getGroup(), "rule__Polyuria__Group__0");
			builder.put(grammarAccess.getPolydipsiaAccess().getGroup(), "rule__Polydipsia__Group__0");
			builder.put(grammarAccess.getSudden_weight_lossAccess().getGroup(), "rule__Sudden_weight_loss__Group__0");
			builder.put(grammarAccess.getPolyphagiaAccess().getGroup(), "rule__Polyphagia__Group__0");
			builder.put(grammarAccess.getGenital_thrushAccess().getGroup(), "rule__Genital_thrush__Group__0");
			builder.put(grammarAccess.getVisual_blurringAccess().getGroup(), "rule__Visual_blurring__Group__0");
			builder.put(grammarAccess.getItchingAccess().getGroup(), "rule__Itching__Group__0");
			builder.put(grammarAccess.getIrritabilityAccess().getGroup(), "rule__Irritability__Group__0");
			builder.put(grammarAccess.getDelayed_healingAccess().getGroup(), "rule__Delayed_healing__Group__0");
			builder.put(grammarAccess.getPartial_paresisAccess().getGroup(), "rule__Partial_paresis__Group__0");
			builder.put(grammarAccess.getMuscle_stiffnessAccess().getGroup(), "rule__Muscle_stiffness__Group__0");
			builder.put(grammarAccess.getAlopeciaAccess().getGroup(), "rule__Alopecia__Group__0");
			builder.put(grammarAccess.getObesityAccess().getGroup(), "rule__Obesity__Group__0");
			builder.put(grammarAccess.getSugar_TestAccess().getGroup(), "rule__Sugar_Test__Group__0");
			builder.put(grammarAccess.getDoctorAccess().getGroup(), "rule__Doctor__Group__0");
			builder.put(grammarAccess.getPatientAccess().getGroup(), "rule__Patient__Group__0");
			builder.put(grammarAccess.getPredict_diabetesAccess().getGroup(), "rule__Predict_diabetes__Group__0");
			builder.put(grammarAccess.getRandom_forestAccess().getGroup(), "rule__Random_forest__Group__0");
			builder.put(grammarAccess.getSVM_ClassifierAccess().getGroup(), "rule__SVM_Classifier__Group__0");
			builder.put(grammarAccess.getJ48ClassifierAccess().getGroup(), "rule__J48Classifier__Group__0");
			builder.put(grammarAccess.getNavieBayesAccess().getGroup(), "rule__NavieBayes__Group__0");
			builder.put(grammarAccess.getDiabetes_Prediction_SystemAccess().getNameAssignment_1(), "rule__Diabetes_Prediction_System__NameAssignment_1");
			builder.put(grammarAccess.getDiabetes_Prediction_SystemAccess().getMedicinesAssignment_2(), "rule__Diabetes_Prediction_System__MedicinesAssignment_2");
			builder.put(grammarAccess.getDiabetes_Prediction_SystemAccess().getSymptomAssignment_3(), "rule__Diabetes_Prediction_System__SymptomAssignment_3");
			builder.put(grammarAccess.getDiabetes_Prediction_SystemAccess().getDoctorsAssignment_4(), "rule__Diabetes_Prediction_System__DoctorsAssignment_4");
			builder.put(grammarAccess.getDiabetes_Prediction_SystemAccess().getPatientAssignment_5(), "rule__Diabetes_Prediction_System__PatientAssignment_5");
			builder.put(grammarAccess.getDiabetes_Prediction_SystemAccess().getMachine_learning_AlgorithmsAssignment_6(), "rule__Diabetes_Prediction_System__Machine_learning_AlgorithmsAssignment_6");
			builder.put(grammarAccess.getMedicinesAccess().getMedicine_nameAssignment_1(), "rule__Medicines__Medicine_nameAssignment_1");
			builder.put(grammarAccess.getMedicinesAccess().getMedicine_dossageAssignment_3(), "rule__Medicines__Medicine_dossageAssignment_3");
			builder.put(grammarAccess.getPolyuriaAccess().getNameAssignment_2(), "rule__Polyuria__NameAssignment_2");
			builder.put(grammarAccess.getPolydipsiaAccess().getNameAssignment_2(), "rule__Polydipsia__NameAssignment_2");
			builder.put(grammarAccess.getSudden_weight_lossAccess().getNameAssignment_2(), "rule__Sudden_weight_loss__NameAssignment_2");
			builder.put(grammarAccess.getPolyphagiaAccess().getNameAssignment_2(), "rule__Polyphagia__NameAssignment_2");
			builder.put(grammarAccess.getGenital_thrushAccess().getNameAssignment_2(), "rule__Genital_thrush__NameAssignment_2");
			builder.put(grammarAccess.getVisual_blurringAccess().getNameAssignment_2(), "rule__Visual_blurring__NameAssignment_2");
			builder.put(grammarAccess.getItchingAccess().getNameAssignment_2(), "rule__Itching__NameAssignment_2");
			builder.put(grammarAccess.getIrritabilityAccess().getNameAssignment_2(), "rule__Irritability__NameAssignment_2");
			builder.put(grammarAccess.getDelayed_healingAccess().getNameAssignment_2(), "rule__Delayed_healing__NameAssignment_2");
			builder.put(grammarAccess.getPartial_paresisAccess().getNameAssignment_2(), "rule__Partial_paresis__NameAssignment_2");
			builder.put(grammarAccess.getMuscle_stiffnessAccess().getNameAssignment_2(), "rule__Muscle_stiffness__NameAssignment_2");
			builder.put(grammarAccess.getAlopeciaAccess().getNameAssignment_2(), "rule__Alopecia__NameAssignment_2");
			builder.put(grammarAccess.getObesityAccess().getNameAssignment_2(), "rule__Obesity__NameAssignment_2");
			builder.put(grammarAccess.getSugar_TestAccess().getPrevious_blood_sugarAssignment_2(), "rule__Sugar_Test__Previous_blood_sugarAssignment_2");
			builder.put(grammarAccess.getSugar_TestAccess().getCurrent_blood_sugarAssignment_4(), "rule__Sugar_Test__Current_blood_sugarAssignment_4");
			builder.put(grammarAccess.getDoctorAccess().getNameAssignment_1(), "rule__Doctor__NameAssignment_1");
			builder.put(grammarAccess.getDoctorAccess().getDoctor_specailizationAssignment_3(), "rule__Doctor__Doctor_specailizationAssignment_3");
			builder.put(grammarAccess.getDoctorAccess().getMedicinesAssignment_4(), "rule__Doctor__MedicinesAssignment_4");
			builder.put(grammarAccess.getDoctorAccess().getSymptomsAssignment_5(), "rule__Doctor__SymptomsAssignment_5");
			builder.put(grammarAccess.getPatientAccess().getNameAssignment_1(), "rule__Patient__NameAssignment_1");
			builder.put(grammarAccess.getPatientAccess().getPatient_GenderAssignment_3(), "rule__Patient__Patient_GenderAssignment_3");
			builder.put(grammarAccess.getPatientAccess().getPatient_AgeAssignment_5(), "rule__Patient__Patient_AgeAssignment_5");
			builder.put(grammarAccess.getPatientAccess().getPatient_HeightAssignment_7(), "rule__Patient__Patient_HeightAssignment_7");
			builder.put(grammarAccess.getPatientAccess().getPatient_WeightAssignment_9(), "rule__Patient__Patient_WeightAssignment_9");
			builder.put(grammarAccess.getPatientAccess().getPatient_blood_pressureAssignment_11(), "rule__Patient__Patient_blood_pressureAssignment_11");
			builder.put(grammarAccess.getPatientAccess().getPulse_rateAssignment_13(), "rule__Patient__Pulse_rateAssignment_13");
			builder.put(grammarAccess.getPatientAccess().getSymptomsAssignment_14(), "rule__Patient__SymptomsAssignment_14");
			builder.put(grammarAccess.getPatientAccess().getMedicinesAssignment_15(), "rule__Patient__MedicinesAssignment_15");
			builder.put(grammarAccess.getPatientAccess().getSugar_testsAssignment_16(), "rule__Patient__Sugar_testsAssignment_16");
			builder.put(grammarAccess.getPatientAccess().getDOCTORSAssignment_18(), "rule__Patient__DOCTORSAssignment_18");
			builder.put(grammarAccess.getPredict_diabetesAccess().getNameAssignment_1(), "rule__Predict_diabetes__NameAssignment_1");
			builder.put(grammarAccess.getRandom_forestAccess().getCreate_treesAssignment_2(), "rule__Random_forest__Create_treesAssignment_2");
			builder.put(grammarAccess.getRandom_forestAccess().getPredict_diabetesAssignment_3(), "rule__Random_forest__Predict_diabetesAssignment_3");
			builder.put(grammarAccess.getSVM_ClassifierAccess().getKernelAssignment_2(), "rule__SVM_Classifier__KernelAssignment_2");
			builder.put(grammarAccess.getSVM_ClassifierAccess().getPredict_diabetesAssignment_3(), "rule__SVM_Classifier__Predict_diabetesAssignment_3");
			builder.put(grammarAccess.getJ48ClassifierAccess().getSet_pruned_treesAssignment_2(), "rule__J48Classifier__Set_pruned_treesAssignment_2");
			builder.put(grammarAccess.getJ48ClassifierAccess().getPredict_diabetesAssignment_3(), "rule__J48Classifier__Predict_diabetesAssignment_3");
			builder.put(grammarAccess.getNavieBayesAccess().getConditional_Probability_basedAssignment_2(), "rule__NavieBayes__Conditional_Probability_basedAssignment_2");
			builder.put(grammarAccess.getNavieBayesAccess().getPredict_diabetesAssignment_3(), "rule__NavieBayes__Predict_diabetesAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
